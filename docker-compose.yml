
version: '3.8'

services:
  # Base de Datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: comodin_postgres
    environment:
      POSTGRES_DB: comodin_ia
      POSTGRES_USER: comodin_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - comodin_network
    restart: unless-stopped

  # Redis para Cache y Sesiones
  redis:
    image: redis:7-alpine
    container_name: comodin_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - comodin_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Aplicación Principal COMODÍN IA
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: comodin_app
    environment:
      - DATABASE_URL=postgresql://comodin_user:${POSTGRES_PASSWORD}@postgres:5432/comodin_ia
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - CRON_SECRET=${CRON_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - MERCADO_PAGO_ACCESS_TOKEN=${MERCADO_PAGO_ACCESS_TOKEN}
      - MERCADO_PAGO_PUBLIC_KEY=${MERCADO_PAGO_PUBLIC_KEY}
      - MERCADO_PAGO_CLIENT_ID=${MERCADO_PAGO_CLIENT_ID}
      - MERCADO_PAGO_CLIENT_SECRET=${MERCADO_PAGO_CLIENT_SECRET}
      - ENCRYPTION_SECRET=${ENCRYPTION_SECRET}
      - ABACUSAI_API_KEY=${ABACUSAI_API_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_FOLDER_PREFIX=${AWS_FOLDER_PREFIX}
      - EVOLUTION_API_URL=${EVOLUTION_API_URL}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NODE_ENV=production
    volumes:
      - ./app/uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
      - evolution-api
    networks:
      - comodin_network
    restart: unless-stopped

  # Evolution API para WhatsApp
  evolution-api:
    image: davidsongomes/evolution-api:v2.1.1
    container_name: comodin_evolution_api
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    environment:
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - CORS_ORIGIN=*
      - CORS_METHODS=POST,GET,PUT,DELETE
      - CORS_CREDENTIALS=true
      - LOG_LEVEL=ERROR
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      - DEL_INSTANCE=false
      - PROVIDER_ENABLED=true
      - PROVIDER_HOST=127.0.0.1
      - PROVIDER_PORT=5432
      - PROVIDER_PREFIX=evolution
      - DATABASE_ENABLED=true
      - DATABASE_CONNECTION_URI=postgresql://comodin_user:${POSTGRES_PASSWORD}@postgres:5432/comodin_ia
      - DATABASE_CONNECTION_CLIENT_NAME=evolution
      - REDIS_ENABLED=true
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_PREFIX_KEY=evolution
      - RABBITMQ_ENABLED=false
      - WEBHOOK_GLOBAL_URL=${WEBHOOK_GLOBAL_URL}
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      - CONFIG_SESSION_PHONE_CLIENT=COMODIN IA
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - QRCODE_LIMIT=30
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      - LANGUAGE=pt-BR
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - comodin_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: comodin_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
      - evolution-api
    networks:
      - comodin_network
    restart: unless-stopped

  # Servicio de Monitoreo (Opcional)
  monitoring:
    image: prom/node-exporter:latest
    container_name: comodin_monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - comodin_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  evolution_instances:
    driver: local
  evolution_store:
    driver: local
  nginx_logs:
    driver: local

networks:
  comodin_network:
    driver: bridge
