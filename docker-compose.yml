
version: '3.8'

services:
  # Base de Datos Principal
  postgres:
    image: postgres:15-alpine
    container_name: comodin_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: comodin_ia
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - comodin_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para Cache y Sesiones
  redis:
    image: redis:7-alpine
    container_name: comodin_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - comodin_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Aplicación Principal (Next.js)
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: comodin_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/comodin_ia
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      CRON_SECRET: ${CRON_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      MERCADO_PAGO_ACCESS_TOKEN: ${MERCADO_PAGO_ACCESS_TOKEN}
      MERCADO_PAGO_PUBLIC_KEY: ${MERCADO_PAGO_PUBLIC_KEY}
      MERCADO_PAGO_CLIENT_ID: ${MERCADO_PAGO_CLIENT_ID}
      MERCADO_PAGO_CLIENT_SECRET: ${MERCADO_PAGO_CLIENT_SECRET}
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET}
      ABACUSAI_API_KEY: ${ABACUSAI_API_KEY}
      AWS_PROFILE: ${AWS_PROFILE}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      AWS_FOLDER_PREFIX: ${AWS_FOLDER_PREFIX}
      EVOLUTION_API_URL: http://evolution-api:8080
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - comodin_network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Evolution API (WhatsApp Integration)
  evolution-api:
    image: atendai/evolution-api:latest
    container_name: comodin_evolution
    restart: unless-stopped
    environment:
      SERVER_TYPE: http
      SERVER_PORT: 8080
      CORS_ORIGIN: '*'
      CORS_METHODS: 'GET,PUT,POST,DELETE,OPTIONS'
      CORS_CREDENTIALS: 'true'
      LOG_LEVEL: ERROR
      LOG_COLOR: false
      LOG_BAILEYS: error
      DEL_INSTANCE: false
      PROVIDER_ENABLED: true
      PROVIDER_HOST: 127.0.0.1
      PROVIDER_PORT: 5656
      PROVIDER_PREFIX: evolution
      DATABASE_ENABLED: true
      DATABASE_CONNECTION_URI: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/comodin_ia?schema=evolution
      DATABASE_CONNECTION_CLIENT_NAME: EvolutionAPI
      REDIS_ENABLED: true
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_PREFIX_KEY: evolution_api
      WEBHOOK_GLOBAL_ENABLED: true
      WEBHOOK_GLOBAL_URL: http://app:3000/api/webhooks/whatsapp
      WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS: true
      CONFIG_SESSION_PHONE_CLIENT: COMODÍN IA
      CONFIG_SESSION_PHONE_NAME: COMODÍN IA WhatsApp
      QRCODE_LIMIT: 30
      QRCODE_COLOR: '#198754'
      TYPEBOT_ENABLED: false
      CHATWOOT_ENABLED: false
      OPENAI_ENABLED: true
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DIFY_ENABLED: false
      FLOWISE_ENABLED: false
      LANGFUSE_ENABLED: false
      AUTHENTICATION_API_KEY: ${EVOLUTION_API_KEY}
      AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES: true
      AUTHENTICATION_TYPE: apikey
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    ports:
      - "8080:8080"
    networks:
      - comodin_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: comodin_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - comodin_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitor de Sistema (Opcional)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: comodin_portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - comodin_network
    profiles:
      - monitoring

  # Backup Service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local
    container_name: comodin_backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: comodin_ia
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTRA_OPTS: -Z6 --schema=public --blobs
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    volumes:
      - ./backups:/backups
    networks:
      - comodin_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup

networks:
  comodin_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  evolution_instances:
    driver: local
  evolution_store:
    driver: local
  nginx_logs:
    driver: local
  portainer_data:
    driver: local
