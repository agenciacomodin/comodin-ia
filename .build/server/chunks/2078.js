"use strict";exports.id=2078,exports.ids=[2078],exports.modules={42078:(e,t,n)=>{n.d(t,{nm:()=>c,rG:()=>d});var a=n(82770),i=n(53524),o=n(84770);let s=new i.PrismaClient,r=new a.ZP({baseURL:process.env.ABACUSAI_BASE_URL||"https://chatllm.abacus.ai/v1",apiKey:process.env.ABACUSAI_API_KEY||""});class c{constructor(e){this.organizationId=e}async analyzeMessage(e,t=!0){let n=Date.now(),a=(0,o.createHash)("md5").update(e.toLowerCase().trim()).digest("hex");if(t){let e=await this.getCachedAnalysis(a);if(e)return await this.updateCacheHit(e.id),this.mapCachedResultToAnalysis(e)}try{let i=await this.performAIAnalysis(e),o=Date.now()-n;return t&&await this.saveToCaches(a,{...i,processingTime:o}),{...i,processingTime:o}}catch(t){return console.error("Error en an\xe1lisis de IA:",t),{detectedIntentions:[i.AIIntentionType.OTHER],confidenceScore:.1,sentiment:"neutral",keywordsExtracted:this.extractBasicKeywords(e),aiProvider:"fallback",modelUsed:"basic-analysis",processingTime:Date.now()-n,analysisVersion:"1.0"}}}async performAIAnalysis(e){let t=this.createAnalysisPrompt(e),n=await r.chat.completions.create({model:"gpt-4o-mini",messages:[{role:"system",content:"Eres un experto en an\xe1lisis de comunicaciones de atenci\xf3n al cliente. Analiza mensajes para determinar intenciones, sentimientos y extraer palabras clave relevantes. Responde \xfanicamente en formato JSON v\xe1lido."},{role:"user",content:t}],temperature:.3,max_tokens:500}),a=n.choices[0]?.message?.content;if(!a)throw Error("No se obtuvo respuesta de la IA");try{let e=JSON.parse(a);return this.mapAIResponseToAnalysis(e)}catch(e){throw console.error("Error parseando respuesta de IA:",e),Error("Respuesta de IA inv\xe1lida")}}createAnalysisPrompt(e){return`
Analiza el siguiente mensaje de un cliente y proporciona el an\xe1lisis en formato JSON:

Mensaje: "${e}"

Responde con este formato JSON exacto:
{
  "intentions": ["SALES", "SUPPORT", "QUESTION", "COMPLAINT", "BOOKING", "PAYMENT", "INFORMATION", "GREETING", "FAREWELL", "OTHER"],
  "confidence": 0.85,
  "sentiment": "positive|negative|neutral",
  "keywords": ["palabra1", "palabra2", "palabra3"]
}

Instrucciones:
1. intentions: Array con las intenciones detectadas (pueden ser m\xfaltiples)
2. confidence: Nivel de confianza del an\xe1lisis (0.0 a 1.0)
3. sentiment: Sentimiento general del mensaje
4. keywords: Palabras clave m\xe1s relevantes (m\xe1ximo 10)

Intenciones disponibles:
- SALES: Inter\xe9s en comprar, consultas de precios, productos
- SUPPORT: Problemas t\xe9cnicos, solicitudes de ayuda
- QUESTION: Preguntas generales, dudas
- COMPLAINT: Quejas, reclamos, insatisfacci\xf3n
- BOOKING: Reservas, citas, agendamiento
- PAYMENT: Pagos, facturaci\xf3n, m\xe9todos de pago
- INFORMATION: Solicitud de informaci\xf3n general
- GREETING: Saludos iniciales
- FAREWELL: Despedidas
- OTHER: Otras intenciones no clasificadas

Responde \xfanicamente el JSON, sin texto adicional.`}mapAIResponseToAnalysis(e){let t=Array.isArray(e.intentions)?e.intentions.filter(e=>Object.values(i.AIIntentionType).includes(e)):[i.AIIntentionType.OTHER];return{detectedIntentions:t.length>0?t:[i.AIIntentionType.OTHER],confidenceScore:Math.max(0,Math.min(1,e.confidence||0)),sentiment:["positive","negative","neutral"].includes(e.sentiment)?e.sentiment:"neutral",keywordsExtracted:Array.isArray(e.keywords)?e.keywords.slice(0,10):[],aiProvider:"openai",modelUsed:"gpt-4o-mini",analysisVersion:"1.0"}}extractBasicKeywords(e){let t=["el","la","de","que","y","en","un","es","se","no","te","lo","le","da","su","por","son","con","para","al","del","me","mi","tu","ti","si","ya","muy","mas","como","pero","nos","os"];return[...new Set(e.toLowerCase().replace(/[^\w\sáéíóúñü]/g," ").split(/\s+/).filter(e=>e.length>2&&!t.includes(e)))].slice(0,5)}async getCachedAnalysis(e){return await s.aIAnalysisCache.findFirst({where:{organizationId:this.organizationId,contentHash:e,expiresAt:{gt:new Date}}})}async updateCacheHit(e){await s.aIAnalysisCache.update({where:{id:e},data:{hitCount:{increment:1},lastUsedAt:new Date}})}async saveToCaches(e,t){let n=new Date;n.setDate(n.getDate()+7),await s.aIAnalysisCache.create({data:{organizationId:this.organizationId,contentHash:e,detectedIntentions:t.detectedIntentions,confidenceScore:t.confidenceScore,sentiment:t.sentiment,keywordsExtracted:t.keywordsExtracted,aiProvider:t.aiProvider,modelUsed:t.modelUsed,processingTime:t.processingTime,analysisVersion:t.analysisVersion,hitCount:0,expiresAt:n}})}mapCachedResultToAnalysis(e){return{detectedIntentions:e.detectedIntentions,confidenceScore:e.confidenceScore.toNumber(),sentiment:e.sentiment,keywordsExtracted:e.keywordsExtracted,aiProvider:e.aiProvider,modelUsed:e.modelUsed,processingTime:e.processingTime,analysisVersion:e.analysisVersion}}async processIncomingMessage(e,t){try{let n=await this.analyzeMessage(t),a=await s.message.findUnique({where:{id:e},include:{conversation:{include:{contact:!0}}}});if(!a)throw Error("Mensaje no encontrado");let i=await this.executeAutomations(a,n);return{analysis:n,automationsExecuted:i.executed,automationsSkipped:i.skipped}}catch(e){throw console.error("Error procesando mensaje:",e),e}}async executeAutomations(e,t){let n=0,a=0;try{for(let i of(await s.automationRule.findMany({where:{organizationId:this.organizationId,isActive:!0},include:{conditions:!0,actions:{orderBy:{executionOrder:"asc"}}},orderBy:{priority:"asc"}})))await this.evaluateRuleConditions(i,e,t)?(await this.executeRuleActions(i,e,t),n++):a++;return{executed:n,skipped:a}}catch(e){return console.error("Error ejecutando automatizaciones:",e),{executed:n,skipped:a}}}async evaluateRuleConditions(e,t,n){if(!e.conditions||0===e.conditions.length)return!0;let a=[];for(let i of e.conditions){let e=await this.evaluateCondition(i,t,n);a.push(e)}return a.every(e=>e)}async evaluateCondition(e,t,n){switch(e.type){case i.AutomationConditionType.INTENTION_DETECTED:return this.evaluateIntentionCondition(e,n);case i.AutomationConditionType.KEYWORDS_CONTAINS:return this.evaluateKeywordsCondition(e,t.content);case i.AutomationConditionType.SENDER_IS_VIP:return t.conversation.contact.isVip;case i.AutomationConditionType.FIRST_MESSAGE:return t.conversation.messageCount<=1;case i.AutomationConditionType.TIME_RANGE:return this.evaluateTimeRangeCondition(e);default:return!1}}evaluateIntentionCondition(e,t){return!!e.intentionTypes&&0!==e.intentionTypes.length&&t.detectedIntentions.some(t=>e.intentionTypes.includes(t))}evaluateKeywordsCondition(e,t){if(!e.keywords||0===e.keywords.length)return!1;let n=t.toLowerCase();switch(e.keywordMatchType||"ANY"){case"ALL":return e.keywords.every(e=>n.includes(e.toLowerCase()));case"EXACT":return e.keywords.some(e=>n===e.toLowerCase());default:return e.keywords.some(e=>n.includes(e.toLowerCase()))}}evaluateTimeRangeCondition(e){if(!e.timeStart||!e.timeEnd)return!0;let t=new Date,n=60*t.getHours()+t.getMinutes(),[a,i]=e.timeStart.split(":").map(Number),[o,s]=e.timeEnd.split(":").map(Number);if(e.weekdays&&e.weekdays.length>0){let n=t.getDay();if(!e.weekdays.includes(0===n?7:n))return!1}return n>=60*a+i&&n<=60*o+s}async executeRuleActions(e,t,n){let a=Date.now();try{let i=[],o=[];for(let a of e.actions)try{await this.executeAction(a,t,n),i.push({type:a.type,success:!0})}catch(e){console.error(`Error ejecutando acci\xf3n ${a.type}:`,e),o.push({type:a.type,error:e instanceof Error?e.message:"Error desconocido"})}await s.automationExecution.create({data:{ruleId:e.id,messageId:t.id,conversationId:t.conversationId,contactId:t.conversation.contactId,success:!0,executionTime:Date.now()-a,detectedIntentions:n.detectedIntentions,confidenceScore:n.confidenceScore,keywordsFound:n.keywordsExtracted,aiAnalysis:n,actionsExecuted:i,actionsSkipped:o}}),await s.automationRule.update({where:{id:e.id},data:{executionCount:{increment:1},successCount:{increment:1},lastExecutedAt:new Date}})}catch(i){throw await s.automationExecution.create({data:{ruleId:e.id,messageId:t.id,conversationId:t.conversationId,contactId:t.conversation.contactId,success:!1,error:i instanceof Error?i.message:"Error desconocido",executionTime:Date.now()-a,detectedIntentions:n.detectedIntentions,confidenceScore:n.confidenceScore,keywordsFound:n.keywordsExtracted,aiAnalysis:n}}),await s.automationRule.update({where:{id:e.id},data:{executionCount:{increment:1},errorCount:{increment:1},lastExecutedAt:new Date}}),i}}async executeAction(e,t,n){switch(e.type){case i.AutomationActionType.ADD_TAG:await this.addContactTag(t.conversation.contactId,e.tagName,e.tagColor);break;case i.AutomationActionType.ASSIGN_AGENT:await this.assignAgent(t.conversationId,e.agentId);break;case i.AutomationActionType.SET_PRIORITY:await this.setPriority(t.conversationId,e.priority);break;case i.AutomationActionType.AUTO_REPLY:await this.sendAutoReply(t.conversationId,e.replyMessage,e.replyDelay);break;case i.AutomationActionType.MARK_VIP:await this.markAsVip(t.conversation.contactId);break;default:console.log(`Acci\xf3n no implementada: ${e.type}`)}}async addContactTag(e,t,n){await s.contactTag.findFirst({where:{contactId:e,name:t}})||await s.contactTag.create({data:{organizationId:this.organizationId,contactId:e,name:t,color:n||"#3B82F6",createdByName:"AI Automation"}})}async assignAgent(e,t){let n=await s.user.findUnique({where:{id:t}});n&&await s.conversation.update({where:{id:e},data:{assignedAgentId:t,assignedAgentName:n.name}})}async setPriority(e,t){await s.conversation.update({where:{id:e},data:{priority:t}})}async sendAutoReply(e,t,n=0){n>0&&await new Promise(e=>setTimeout(e,1e3*n)),await s.message.create({data:{organizationId:this.organizationId,conversationId:e,direction:"OUTGOING",type:"TEXT",content:t,sentByName:"Respuesta Autom\xe1tica",sentAt:new Date}}),await s.conversation.update({where:{id:e},data:{lastMessageAt:new Date,lastMessageText:t,lastMessageFrom:"OUTGOING",messageCount:{increment:1}}})}async markAsVip(e){await s.contact.update({where:{id:e},data:{isVip:!0}})}async cleanExpiredCache(){return(await s.aIAnalysisCache.deleteMany({where:{organizationId:this.organizationId,expiresAt:{lt:new Date}}})).count}}function d(e){return new c(e)}}};