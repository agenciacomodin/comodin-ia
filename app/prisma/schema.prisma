generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/comodin_ia/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum para roles de usuario en el sistema multi-tenant
enum UserRole {
  PROPIETARIO    // Admin total de la organización
  AGENTE         // Empleado que atiende clientes
  DISTRIBUIDOR   // Socio que gestiona clientes
  SUPER_ADMIN    // Rol de supervisión de COMODÍN IA
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

// Tabla Organizations - Base del multi-tenant (aislamiento por tenant)
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL friendly identifier
  description String?
  country     String?
  phone       String?
  email       String?
  website     String?
  logo        String?  // URL de imagen
  status      OrganizationStatus @default(TRIAL)
  
  // Configuración de la organización
  timezone    String   @default("America/Mexico_City")
  currency    String   @default("MXN")
  language    String   @default("es")
  
  // Fechas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  users       User[]
  
  @@map("organizations")
}

// Tabla Users con aislamiento por organización
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  fullName          String?
  image             String?
  phone             String?
  country           String?
  
  // Multi-tenant: Aislamiento por organización
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Sistema de roles
  role              UserRole  @default(AGENTE)
  
  // Configuración del usuario
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  timezone          String?
  language          String?   @default("es")
  
  // Fechas
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // NextAuth relations
  accounts          Account[]
  sessions          Session[]
  
  @@index([organizationId])
  @@index([email])
  @@map("users")
}

// Tablas requeridas para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
