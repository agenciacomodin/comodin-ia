generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/comodin_ia/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum para roles de usuario en el sistema multi-tenant
enum UserRole {
  PROPIETARIO    // Admin total de la organización
  AGENTE         // Empleado que atiende clientes
  DISTRIBUIDOR   // Socio que gestiona clientes
  SUPER_ADMIN    // Rol de supervisión de COMODÍN IA
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum SubscriptionPlan {
  FREE       // Plan gratuito
  STARTER    // Plan básico
  PREMIUM    // Plan intermedio  
  ENTERPRISE // Plan empresarial
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}

enum PaymentProvider {
  STRIPE
  MERCADO_PAGO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

enum AIUsageType {
  CHAT_RESPONSE          // Respuesta de chat con IA
  TEXT_ANALYSIS          // Análisis de texto
  SENTIMENT_ANALYSIS     // Análisis de sentimientos
  CONTENT_GENERATION     // Generación de contenido
  TRANSLATION           // Traducción
  SUMMARY               // Resumen de texto
  OTHER                 // Otros usos
}

enum TransactionType {
  WALLET_RECHARGE       // Recarga de billetera
  AI_USAGE_DEDUCTION    // Descuento por uso de IA
  REFUND                // Reembolso
  ADJUSTMENT            // Ajuste manual
}

// Tabla Organizations - Base del multi-tenant (aislamiento por tenant)
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL friendly identifier
  description String?
  country     String?
  phone       String?
  email       String?
  website     String?
  logo        String?  // URL de imagen
  status      OrganizationStatus @default(TRIAL)
  
  // Sistema de suscripciones
  currentPlan       SubscriptionPlan @default(FREE)
  subscriptionId    String?          // ID de la suscripción activa
  billingEmail      String?          // Email para facturación
  
  // Límites del plan actual
  maxUsers          Int              @default(1)    // Usuarios permitidos
  maxMessages       Int              @default(100)  // Mensajes por mes
  maxIntegrations   Int              @default(1)    // Integraciones permitidas
  hasAdvancedFeatures Boolean        @default(false) // Funcionalidades premium
  
  // Control de uso (reseteo mensual)
  currentUsers      Int              @default(0)
  currentMessages   Int              @default(0)
  usageResetDate    DateTime?        // Fecha del próximo reseteo
  
  // Configuración de la organización
  timezone    String   @default("America/Mexico_City")
  currency    String   @default("MXN")
  language    String   @default("es")
  
  // Fechas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  users                User[]
  invitations          Invitation[]
  subscriptions        Subscription[]
  payments             Payment[]
  aiWallet             AIWallet?
  financialTransactions FinancialTransaction[]
  
  // Centro de Comunicación (CRM)
  contacts             Contact[]
  contactTags          ContactTag[]
  contactNotes         ContactNote[]
  conversations        Conversation[]
  messages             Message[]
  
  // Canales de WhatsApp y Respuestas Rápidas
  whatsappChannels     WhatsAppChannel[]
  quickReplies         QuickReply[]
  
  // Automatizaciones (IA Activa)
  automationRules      AutomationRule[]
  aiAnalysisCache      AIAnalysisCache[]
  
  @@map("organizations")
}

// Tabla Users con aislamiento por organización
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  fullName          String?
  image             String?
  phone             String?
  country           String?
  
  // Multi-tenant: Aislamiento por organización
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Sistema de roles
  role              UserRole  @default(AGENTE)
  
  // Configuración del usuario
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  timezone          String?
  language          String?   @default("es")
  
  // Fechas
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // NextAuth relations
  accounts          Account[]
  sessions          Session[]
  
  // Respuestas Rápidas creadas y modificadas
  createdQuickReplies QuickReply[]
  modifiedQuickReplies QuickReply[] @relation("QuickReplyModifiedBy")
  
  @@index([organizationId])
  @@index([email])
  @@map("users")
}

// Tabla Invitations - Sistema de invitaciones de equipo
model Invitation {
  id             String           @id @default(cuid())
  email          String
  token          String           @unique
  role           UserRole         @default(AGENTE)
  status         InvitationStatus @default(PENDING)
  
  // Multi-tenant: Invitación específica por organización
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Usuario que envió la invitación
  invitedBy      String           // User ID
  invitedByName  String           // Nombre del invitador para el email
  
  // Datos opcionales para pre-llenar el registro
  firstName      String?
  lastName       String?
  message        String?          // Mensaje personalizado
  
  // Control de expiración
  expiresAt      DateTime
  acceptedAt     DateTime?
  
  // Fechas
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  @@index([organizationId])
  @@index([email])
  @@index([token])
  @@map("invitations")
}

// Tabla Subscriptions - Manejo de suscripciones y pagos recurrentes
model Subscription {
  id                  String              @id @default(cuid())
  
  // Relación con la organización
  organizationId      String
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Detalles de la suscripción
  plan                SubscriptionPlan
  status              SubscriptionStatus  @default(TRIALING)
  paymentProvider     PaymentProvider
  
  // IDs externos de los proveedores de pago
  stripeSubscriptionId     String?        // ID de Stripe
  stripeCustomerId         String?        // Customer ID de Stripe
  mercadopagoPreapprovalId String?        // ID de preapproval de MercadoPago
  mercadopagoPayerId       String?        // Payer ID de MercadoPago
  
  // Detalles de facturación
  pricePerMonth       Decimal             // Precio mensual en la moneda local
  currency            String              @default("USD")
  billingCycle        String              @default("monthly") // monthly, yearly
  
  // Fechas importantes
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean             @default(false)
  canceledAt          DateTime?
  endedAt             DateTime?
  trialStart          DateTime?
  trialEnd            DateTime?
  
  // Metadata
  metadata            Json?               // Información adicional
  
  // Fechas de control
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relaciones
  payments           Payment[]
  
  @@index([organizationId])
  @@index([stripeSubscriptionId])
  @@index([mercadopagoPreapprovalId])
  @@map("subscriptions")
}

// Tabla Payments - Registro de pagos individuales
model Payment {
  id                     String          @id @default(cuid())
  
  // Relaciones
  organizationId         String
  organization           Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptionId         String?
  subscription           Subscription?   @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  
  // Detalles del pago
  amount                 Decimal         // Monto pagado
  currency               String          @default("USD")
  status                 PaymentStatus   @default(PENDING)
  paymentProvider        PaymentProvider
  
  // IDs externos de los proveedores
  stripePaymentIntentId  String?         // Payment Intent ID de Stripe
  stripeChargeId         String?         // Charge ID de Stripe
  mercadopagoPaymentId   String?         // Payment ID de MercadoPago
  
  // Detalles de facturación
  description            String?         // Descripción del pago
  invoiceUrl             String?         // URL de la factura
  receiptUrl             String?         // URL del recibo
  
  // Fechas
  paidAt                 DateTime?       // Fecha de pago exitoso
  failedAt               DateTime?       // Fecha de pago fallido
  refundedAt             DateTime?       // Fecha de reembolso
  
  // Información adicional
  failureReason          String?         // Razón del fallo
  metadata               Json?           // Información adicional
  
  // Control de fechas
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([stripePaymentIntentId])
  @@index([mercadopagoPaymentId])
  @@map("payments")
}

// Tabla AIWallet - Billetera virtual para consumo de IA
model AIWallet {
  id             String        @id @default(cuid())
  
  // Relación con la organización (1:1)
  organizationId String        @unique
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Saldo actual de la billetera
  balance        Decimal       @default(0.00) @db.Decimal(10, 2)
  currency       String        @default("USD")
  
  // Estadísticas de uso
  totalSpent     Decimal       @default(0.00) @db.Decimal(10, 2)  // Total gastado en IA
  totalRecharged Decimal       @default(0.00) @db.Decimal(10, 2)  // Total recargado
  transactionCount Int         @default(0)    // Número de transacciones
  
  // Control de alertas de saldo bajo
  lowBalanceThreshold Decimal  @default(10.00) @db.Decimal(10, 2)
  alertsEnabled       Boolean  @default(true)
  lastLowBalanceAlert DateTime?
  
  // Control de fechas
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relaciones
  aiTransactions AITransaction[]
  
  @@map("ai_wallets")
}

// Tabla AITransaction - Registro detallado de cada uso de IA
model AITransaction {
  id             String       @id @default(cuid())
  
  // Relación con la billetera
  walletId       String
  wallet         AIWallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  // Relación con el proveedor de IA
  providerId     String?      // ID del proveedor configurado
  provider       AIProvider?  @relation(fields: [providerId], references: [id], onDelete: SetNull)
  
  // Detalles del uso de IA (mantenemos providerName para compatibilidad)
  usageType      AIUsageType  // Tipo de uso de IA
  providerName   String       // Nombre del proveedor (OpenAI, Claude, etc.)
  modelUsed      String?      // Modelo específico usado
  
  // Costos de la transacción
  providerCost   Decimal      @db.Decimal(10, 6) // Costo que nos cobró el proveedor
  clientCost     Decimal      @db.Decimal(10, 6) // Costo cobrado al cliente (providerCost * 1.30)
  margin         Decimal      @db.Decimal(5, 4) @default(0.30) // Margen aplicado (30%)
  
  // Detalles técnicos del uso
  inputTokens    Int?         // Tokens de entrada
  outputTokens   Int?         // Tokens de salida
  totalTokens    Int?         // Total de tokens procesados
  processingTime Int?         // Tiempo de procesamiento en ms
  
  // Metadatos de la transacción
  description    String?      // Descripción del uso
  metadata       Json?        // Información adicional (request info, response info, etc.)
  
  // Usuario que realizó la acción
  userId         String?      // ID del usuario que usó la IA
  userName       String?      // Nombre del usuario para el historial
  
  // Balance después de la transacción
  balanceAfter   Decimal      @db.Decimal(10, 2) // Saldo después del descuento
  
  // Control de fechas
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([walletId])
  @@index([usageType])
  @@index([createdAt])
  @@map("ai_transactions")
}

// Tabla FinancialTransaction - Historial completo de transacciones financieras
model FinancialTransaction {
  id                String          @id @default(cuid())
  
  // Relación con la organización
  organizationId    String
  organization      Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Tipo y detalles de la transacción
  type              TransactionType
  amount            Decimal         @db.Decimal(10, 2) // Monto de la transacción
  currency          String          @default("USD")
  
  // Descripción y referencia
  description       String
  reference         String?         // Referencia externa (stripe payment id, etc.)
  
  // Detalles específicos según el tipo
  paymentProvider   PaymentProvider? // Si es recarga: proveedor usado
  aiTransactionId   String?         // Si es uso de IA: referencia a la transacción
  
  // Saldos antes y después de la transacción  
  balanceBefore     Decimal         @db.Decimal(10, 2)
  balanceAfter      Decimal         @db.Decimal(10, 2)
  
  // Usuario que realizó la transacción
  userId            String?         // Usuario responsable de la transacción
  userName          String?         // Nombre del usuario para el historial
  
  // Información adicional
  metadata          Json?           // Información adicional
  
  // Control de fechas
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([organizationId])
  @@index([type])
  @@index([createdAt])
  @@map("financial_transactions")
}

// Tabla AIProviders - Gestión centralizada de proveedores de IA (Super Admin only)
model AIProvider {
  id              String   @id @default(cuid())
  
  // Información del proveedor
  name            String   // Nombre del proveedor (OpenAI, Gemini, Claude, etc.)
  displayName     String   // Nombre para mostrar en UI
  description     String?  // Descripción del proveedor
  logoUrl         String?  // URL del logo del proveedor
  
  // Configuración técnica
  apiUrl          String   // URL base de la API
  apiKeyName      String   @default("API_KEY") // Nombre del campo de la clave (API_KEY, ACCESS_TOKEN, etc.)
  encryptedApiKey String   // Clave API encriptada
  
  // Configuración del modelo
  defaultModel    String?  // Modelo por defecto
  availableModels Json?    // Lista de modelos disponibles
  
  // Configuración de precios
  inputPricePerToken  Decimal? @db.Decimal(10, 8) // Precio por token de entrada
  outputPricePerToken Decimal? @db.Decimal(10, 8) // Precio por token de salida
  currency            String   @default("USD")
  
  // Estado y configuración
  isActive        Boolean  @default(true)  // Si el proveedor está activo
  isDefault       Boolean  @default(false) // Si es el proveedor por defecto
  maxTokensPerRequest Int? // Límite de tokens por request
  rateLimitPerMinute  Int? // Límite de requests por minuto
  
  // Metadatos
  metadata        Json?    // Configuración adicional específica del proveedor
  
  // Auditoria - Solo Super Admin puede gestionar
  createdBy       String   // ID del Super Admin que lo creó
  createdByName   String   // Nombre del Super Admin para auditoria
  updatedBy       String?  // ID del último Super Admin que lo modificó
  updatedByName   String?  // Nombre del último Super Admin que lo modificó
  
  // Control de fechas
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastUsedAt      DateTime? // Última vez que se usó este proveedor
  
  // Relaciones
  transactions    AITransaction[] // Transacciones que usaron este proveedor
  
  @@unique([name]) // Nombre del proveedor debe ser único
  @@index([isActive])
  @@index([isDefault])
  @@index([createdBy])
  @@map("ai_providers")
}

// ===========================================
// CENTRO DE COMUNICACIÓN (CRM)
// ===========================================

enum ContactStatus {
  ACTIVE        // Contacto activo
  INACTIVE      // Contacto inactivo
  BLOCKED       // Contacto bloqueado
  ARCHIVED      // Contacto archivado
}

enum ConversationStatus {
  OPEN          // Conversación abierta/activa
  PENDING       // Pendiente de respuesta
  RESOLVED      // Resuelta/cerrada
  TRANSFERRED   // Transferida a otro agente
  ARCHIVED      // Archivada
}

enum ConversationPriority {
  LOW           // Prioridad baja
  MEDIUM        // Prioridad media
  HIGH          // Prioridad alta
  URGENT        // Urgente
}

enum MessageType {
  TEXT          // Mensaje de texto
  IMAGE         // Imagen
  DOCUMENT      // Documento
  AUDIO         // Audio/Nota de voz
  VIDEO         // Video
  LOCATION      // Ubicación
  CONTACT       // Contacto compartido
  SYSTEM        // Mensaje del sistema
}

enum MessageDirection {
  INCOMING      // Mensaje entrante (del cliente)
  OUTGOING      // Mensaje saliente (del agente)
}

// Tabla Contact - Información de contactos/clientes
model Contact {
  id               String        @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Información básica del contacto
  name             String        // Nombre del contacto
  phone            String        // Número de teléfono (único por organización)
  email            String?       // Email opcional
  avatar           String?       // URL del avatar/foto de perfil
  
  // Información adicional
  firstName        String?       // Nombre
  lastName         String?       // Apellido
  company          String?       // Empresa/Organización
  jobTitle         String?       // Cargo/Puesto
  address          String?       // Dirección
  city             String?       // Ciudad
  country          String?       // País
  timezone         String?       // Zona horaria del contacto
  
  // Estado y clasificación
  status           ContactStatus @default(ACTIVE)
  isVip            Boolean       @default(false) // Contacto VIP
  
  // Información de WhatsApp
  whatsappId       String?       // ID interno de WhatsApp
  whatsappName     String?       // Nombre en WhatsApp
  lastSeen         DateTime?     // Última conexión en WhatsApp
  
  // Metadatos CRM
  source           String?       // Origen del contacto (web, referido, etc.)
  leadScore        Int?          // Puntaje de lead (0-100)
  lifetimeValue    Decimal?      @db.Decimal(10, 2) // Valor de vida del cliente
  
  // Fechas importantes
  firstContact     DateTime?     // Primera vez que contactó
  lastContact      DateTime?     // Último contacto
  
  // Control de fechas
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relaciones
  conversations    Conversation[]
  tags             ContactTag[]
  notes            ContactNote[]
  
  @@unique([organizationId, phone]) // Un número único por organización
  @@index([organizationId])
  @@index([phone])
  @@index([status])
  @@index([isVip])
  @@map("contacts")
}

// Tabla ContactTag - Sistema de etiquetas para clasificar contactos
model ContactTag {
  id               String        @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Relación con el contacto
  contactId        String
  contact          Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Información de la etiqueta
  name             String        // Nombre de la etiqueta (ej: "Cliente VIP", "Lead Caliente")
  color            String?       // Color hexadecimal para la UI (#FF5733)
  description      String?       // Descripción opcional
  
  // Usuario que asignó la etiqueta
  createdBy        String?       // ID del usuario
  createdByName    String?       // Nombre del usuario para auditoria
  
  // Control de fechas
  createdAt        DateTime      @default(now())
  
  @@unique([contactId, name]) // No duplicar etiquetas en el mismo contacto
  @@index([organizationId])
  @@index([contactId])
  @@map("contact_tags")
}

// Tabla ContactNote - Notas internas sobre contactos (no visibles al cliente)
model ContactNote {
  id               String        @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Relación con el contacto
  contactId        String
  contact          Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Contenido de la nota
  content          String        @db.Text // Nota interna del equipo
  isImportant      Boolean       @default(false) // Marcar como importante
  
  // Usuario que creó la nota
  createdBy        String        // ID del usuario
  createdByName    String        // Nombre del usuario para mostrar
  
  // Control de fechas
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  @@index([organizationId])
  @@index([contactId])
  @@map("contact_notes")
}

// Tabla Conversation - Conversaciones/Chats individuales
model Conversation {
  id               String               @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Relación con el contacto
  contactId        String
  contact          Contact              @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Estado de la conversación
  status           ConversationStatus   @default(OPEN)
  priority         ConversationPriority @default(MEDIUM)
  
  // Asignación de agente
  assignedAgentId  String?              // ID del agente asignado
  assignedAgentName String?             // Nombre del agente asignado
  
  // Información de la conversación
  title            String?              // Título/Subject opcional
  summary          String?              @db.Text // Resumen de la conversación
  
  // Métricas de la conversación
  messageCount     Int                  @default(0) // Total de mensajes
  unreadCount      Int                  @default(0) // Mensajes no leídos por el agente
  
  // Información temporal
  lastMessageAt    DateTime?            // Fecha del último mensaje
  lastMessageText  String?              // Texto del último mensaje (para preview)
  lastMessageFrom  MessageDirection?    // Dirección del último mensaje
  
  // Tiempo de respuesta
  firstResponseAt  DateTime?            // Primera respuesta del agente
  avgResponseTime  Int?                 // Tiempo promedio de respuesta en minutos
  
  // WhatsApp específico
  whatsappChatId   String?              // ID del chat en WhatsApp
  whatsappChannelId String?             // Canal de WhatsApp asociado
  whatsappChannel  WhatsAppChannel?     @relation(fields: [whatsappChannelId], references: [id])
  
  // Control de fechas
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  closedAt         DateTime?            // Fecha de cierre
  
  // Relaciones
  messages         Message[]
  
  @@unique([organizationId, whatsappChatId]) // Chat único por organización
  @@index([organizationId])
  @@index([contactId])
  @@index([status])
  @@index([assignedAgentId])
  @@index([lastMessageAt])
  @@map("conversations")
}

// Tabla Message - Mensajes individuales dentro de conversaciones
model Message {
  id               String           @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Relación con la conversación
  conversationId   String
  conversation     Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Dirección y tipo del mensaje
  direction        MessageDirection // INCOMING o OUTGOING
  type             MessageType      @default(TEXT)
  
  // Contenido del mensaje
  content          String           @db.Text // Texto del mensaje
  
  // Archivos adjuntos (para imágenes, documentos, etc.)
  attachmentUrl    String?          // URL del archivo en cloud storage
  attachmentType   String?          // MIME type del archivo
  attachmentName   String?          // Nombre original del archivo
  attachmentSize   Int?             // Tamaño del archivo en bytes
  
  // Información específica de WhatsApp
  whatsappId       String?          // ID único del mensaje en WhatsApp
  whatsappStatus   String?          // Estado en WhatsApp (sent, delivered, read)
  whatsappChannelId String?         // Canal de WhatsApp por el que se envió
  whatsappChannel  WhatsAppChannel? @relation(fields: [whatsappChannelId], references: [id])
  
  // Usuario que envió el mensaje (si es OUTGOING)
  sentBy           String?          // ID del usuario/agente
  sentByName       String?          // Nombre del usuario/agente
  
  // Estado del mensaje
  isRead           Boolean          @default(false) // Si fue leído por el agente
  readAt           DateTime?        // Cuándo fue leído
  
  // Información temporal
  sentAt           DateTime         @default(now()) // Cuándo se envió
  deliveredAt      DateTime?        // Cuándo se entregó
  
  // Respuesta a otro mensaje (threading)
  replyToId        String?          // ID del mensaje al que responde
  replyTo          Message?         @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies          Message[]        @relation("MessageReplies")
  
  // Metadatos adicionales
  metadata         Json?            // Información adicional específica del mensaje
  
  // Control de fechas
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@unique([whatsappId]) // ID de WhatsApp debe ser único
  @@index([organizationId])
  @@index([conversationId])
  @@index([direction])
  @@index([type])
  @@index([sentAt])
  @@index([isRead])
  @@index([whatsappChannelId])
  @@map("messages")
}

// Enums para los canales de WhatsApp
enum WhatsAppConnectionType {
  QR_CODE     // Conexión rápida con código QR
  API_OFFICIAL // Conexión profesional con API oficial de Meta
}

enum WhatsAppConnectionStatus {
  DISCONNECTED
  CONNECTING
  CONNECTED
  ERROR
  EXPIRED
}

// Tabla WhatsAppChannel - Gestión de canales/conexiones de WhatsApp
model WhatsAppChannel {
  id               String                   @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Información del canal
  name             String                   // Nombre del canal (ej: "Soporte Principal")
  phone            String                   // Número de teléfono del canal
  connectionType   WhatsAppConnectionType   // Tipo de conexión
  status           WhatsAppConnectionStatus @default(DISCONNECTED)
  
  // Datos específicos para conexión QR
  qrCode           String?                  // Código QR generado para conexión
  qrExpiration     DateTime?               // Fecha de expiración del QR
  
  // Datos específicos para API oficial
  accessToken      String?                 // Token de acceso de Meta
  appId            String?                 // ID de la aplicación de Meta
  appSecret        String?                 // Secreto de la aplicación
  webhookVerifyToken String?              // Token para verificar webhook
  phoneNumberId    String?                 // ID del número de teléfono en la API
  businessAccountId String?               // ID de la cuenta de negocio
  
  // Configuración del canal
  isActive         Boolean                  @default(true)
  isDefault        Boolean                  @default(false) // Canal por defecto
  
  // Configuración de mensajes automáticos
  welcomeMessage   String?                 // Mensaje de bienvenida automático
  autoReplyMessage String?                 // Mensaje de respuesta automática
  workingHours     Json?                   // Horario de atención {"start": "09:00", "end": "18:00"}
  
  // Estadísticas del canal
  messagesReceived Int                     @default(0)
  messagesSent     Int                     @default(0)
  lastActivity     DateTime?               // Última actividad
  
  // Timestamps
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  connectedAt      DateTime?               // Fecha de última conexión exitosa
  
  // Relaciones
  conversations    Conversation[]
  messages         Message[]
  
  @@unique([organizationId, phone]) // Número único por organización
  @@index([organizationId])
  @@index([status])
  @@index([connectionType])
  @@map("whatsapp_channels")
}

// Tabla QuickReply - Respuestas rápidas/plantillas de mensajes
model QuickReply {
  id             String       @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Información de la respuesta rápida
  title          String       // Título/nombre de la plantilla (ej: "Saludo inicial")
  shortcut       String       // Atajo de teclado (ej: "hola", "gracias")
  content        String       @db.Text // Contenido del mensaje
  
  // Categorización y organización
  category       String?      // Categoría para organizar (ej: "Saludos", "Precios")
  tags           String[]     @default([]) // Tags para búsqueda
  
  // Personalización
  variables      Json?        // Variables que se pueden reemplazar {"nombre": "", "empresa": ""}
  
  // Configuración
  isActive       Boolean      @default(true)
  isGlobal       Boolean      @default(false) // Visible para todos los agentes
  
  // Estadísticas de uso
  usageCount     Int          @default(0)
  lastUsedAt     DateTime?
  
  // Creación y modificación
  createdBy      String       // ID del usuario que la creó
  createdByUser  User         @relation(fields: [createdBy], references: [id])
  modifiedBy     String?      // ID del último usuario que la modificó
  modifiedByUser User?        @relation("QuickReplyModifiedBy", fields: [modifiedBy], references: [id])
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([organizationId, shortcut]) // Atajo único por organización
  @@index([organizationId])
  @@index([shortcut])
  @@index([category])
  @@index([isActive])
  @@map("quick_replies")
}

// ===========================================
// SISTEMA DE AUTOMATIZACIONES (IA ACTIVA)
// ===========================================

// Enums para el sistema de automatizaciones
enum AIIntentionType {
  SALES         // Intención de venta
  SUPPORT       // Solicitud de soporte
  QUESTION      // Pregunta general
  COMPLAINT     // Queja o reclamo
  BOOKING       // Reserva o cita
  PAYMENT       // Relacionado a pagos
  INFORMATION   // Solicitud de información
  GREETING      // Saludo inicial
  FAREWELL      // Despedida
  OTHER         // Otra intención
}

enum AutomationConditionType {
  INTENTION_DETECTED    // Intención detectada por IA
  KEYWORDS_CONTAINS     // Mensaje contiene palabras clave
  SENDER_IS_VIP         // El remitente es cliente VIP
  TIME_RANGE           // Dentro de horario específico
  FIRST_MESSAGE        // Es el primer mensaje del contacto
  MESSAGE_COUNT        // Número de mensajes en la conversación
  RESPONSE_TIME        // Tiempo desde último mensaje
}

enum AutomationActionType {
  ADD_TAG              // Agregar etiqueta al contacto
  ASSIGN_AGENT         // Asignar agente específico
  SET_PRIORITY         // Establecer prioridad
  AUTO_REPLY           // Respuesta automática
  MARK_VIP             // Marcar como VIP
  TRANSFER_CONVERSATION // Transferir conversación
  CREATE_TASK          // Crear tarea interna
  SEND_NOTIFICATION    // Enviar notificación
}

// Tabla AutomationRule - Reglas de automatización configurables
model AutomationRule {
  id               String        @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Información de la regla
  name             String        // Nombre descriptivo de la regla
  description      String?       // Descripción detallada
  isActive         Boolean       @default(true)
  
  // Prioridad de ejecución (menor número = mayor prioridad)
  priority         Int           @default(100)
  
  // Estadísticas de uso
  executionCount   Int           @default(0)
  lastExecutedAt   DateTime?
  successCount     Int           @default(0)
  errorCount       Int           @default(0)
  
  // Usuario que creó la regla
  createdBy        String
  createdByName    String
  modifiedBy       String?
  modifiedByName   String?
  
  // Control de fechas
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relaciones
  conditions       AutomationCondition[]
  actions          AutomationAction[]
  executions       AutomationExecution[]
  
  @@index([organizationId])
  @@index([isActive])
  @@index([priority])
  @@map("automation_rules")
}

// Tabla AutomationCondition - Condiciones para activar automatizaciones
model AutomationCondition {
  id            String                  @id @default(cuid())
  
  // Relación con la regla
  ruleId        String
  rule          AutomationRule          @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  // Tipo de condición
  type          AutomationConditionType
  
  // Operador lógico con otras condiciones (AND/OR)
  logicalOperator String                @default("AND") // AND, OR
  
  // Datos específicos según el tipo de condición
  intentionTypes  AIIntentionType[]     @default([]) // Para INTENTION_DETECTED
  keywords        String[]              @default([]) // Para KEYWORDS_CONTAINS
  keywordMatchType String?              @default("ANY") // ANY, ALL, EXACT
  
  // Configuración temporal para TIME_RANGE
  timeStart       String?               // "09:00"
  timeEnd         String?               // "18:00"
  weekdays        Int[]                 @default([]) // [1,2,3,4,5] (1=Monday)
  timezone        String?               // Timezone para validar horarios
  
  // Configuración numérica
  messageCountMin Int?                  // Mínimo de mensajes
  messageCountMax Int?                  // Máximo de mensajes
  responseTimeMin Int?                  // Tiempo mínimo en minutos
  responseTimeMax Int?                  // Tiempo máximo en minutos
  
  // Metadatos adicionales
  metadata        Json?                 // Configuración adicional específica
  
  // Control de fechas
  createdAt       DateTime              @default(now())
  
  @@index([ruleId])
  @@index([type])
  @@map("automation_conditions")
}

// Tabla AutomationAction - Acciones a ejecutar cuando se cumple una regla
model AutomationAction {
  id              String               @id @default(cuid())
  
  // Relación con la regla
  ruleId          String
  rule            AutomationRule       @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  // Tipo de acción
  type            AutomationActionType
  
  // Orden de ejecución dentro de la regla
  executionOrder  Int                  @default(1)
  
  // Datos específicos según el tipo de acción
  tagName         String?              // Para ADD_TAG
  tagColor        String?              // Color de la etiqueta
  
  agentId         String?              // Para ASSIGN_AGENT
  agentName       String?              // Nombre del agente
  
  priority        ConversationPriority? // Para SET_PRIORITY
  
  replyMessage    String?              @db.Text // Para AUTO_REPLY
  replyDelay      Int?                 @default(0) // Delay en segundos
  
  targetAgentId   String?              // Para TRANSFER_CONVERSATION
  transferReason  String?              // Razón de la transferencia
  
  taskTitle       String?              // Para CREATE_TASK
  taskDescription String?              @db.Text
  taskDueDate     DateTime?            // Fecha límite de la tarea
  
  notificationTitle String?            // Para SEND_NOTIFICATION
  notificationMessage String?          @db.Text
  notificationChannels String[]        @default([]) // email, slack, webhook
  
  // Metadatos adicionales
  metadata        Json?                // Configuración adicional específica
  
  // Control de fechas
  createdAt       DateTime             @default(now())
  
  @@index([ruleId])
  @@index([type])
  @@index([executionOrder])
  @@map("automation_actions")
}

// Tabla AutomationExecution - Historial de ejecuciones de automatizaciones
model AutomationExecution {
  id                String           @id @default(cuid())
  
  // Relación con la regla ejecutada
  ruleId            String
  rule              AutomationRule   @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  // Contexto de la ejecución
  messageId         String?          // Mensaje que disparó la automatización
  conversationId    String?          // Conversación afectada
  contactId         String?          // Contacto afectado
  
  // Resultado de la ejecución
  success           Boolean          @default(false)
  error             String?          @db.Text
  executionTime     Int              @default(0) // Tiempo en milisegundos
  
  // IA Analysis realizado
  detectedIntentions AIIntentionType[] @default([])
  confidenceScore   Decimal?         @db.Decimal(5, 4) // Score de confianza 0-1
  keywordsFound     String[]         @default([])
  aiAnalysis        Json?            // Análisis completo de la IA
  
  // Acciones ejecutadas
  actionsExecuted   Json?            // Lista de acciones que se ejecutaron
  actionsSkipped    Json?            // Lista de acciones que se saltaron
  
  // Control de fechas
  createdAt         DateTime         @default(now())
  
  @@index([ruleId])
  @@index([messageId])
  @@index([conversationId])
  @@index([contactId])
  @@index([success])
  @@index([createdAt])
  @@map("automation_executions")
}

// Tabla AIAnalysisCache - Cache de análisis de IA para optimizar performance
model AIAnalysisCache {
  id               String             @id @default(cuid())
  
  // Multi-tenant: Aislamiento por organización
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Hash del contenido para evitar duplicados
  contentHash      String             // MD5 o SHA1 del mensaje
  
  // Análisis realizado por la IA
  detectedIntentions AIIntentionType[] @default([])
  confidenceScore   Decimal           @db.Decimal(5, 4) // Score de confianza 0-1
  sentiment         String?           // positive, negative, neutral
  keywordsExtracted String[]          @default([])
  
  // Metadatos del análisis
  aiProvider        String            // Proveedor de IA usado
  modelUsed         String            // Modelo específico usado
  processingTime    Int               // Tiempo de procesamiento en ms
  analysisVersion   String            @default("1.0") // Versión del algoritmo
  
  // Control de cache
  hitCount          Int               @default(0) // Cuántas veces se ha usado
  lastUsedAt        DateTime          @default(now())
  expiresAt         DateTime?         // Fecha de expiración del cache
  
  // Control de fechas
  createdAt         DateTime          @default(now())
  
  @@unique([organizationId, contentHash]) // Hash único por organización
  @@index([organizationId])
  @@index([contentHash])
  @@index([lastUsedAt])
  @@index([expiresAt])
  @@map("ai_analysis_cache")
}

// Tablas requeridas para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
