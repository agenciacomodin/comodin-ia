generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/comodin_ia/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum para roles de usuario en el sistema multi-tenant
enum UserRole {
  PROPIETARIO    // Admin total de la organización
  AGENTE         // Empleado que atiende clientes
  DISTRIBUIDOR   // Socio que gestiona clientes
  SUPER_ADMIN    // Rol de supervisión de COMODÍN IA
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum SubscriptionPlan {
  FREE       // Plan gratuito
  STARTER    // Plan básico
  PREMIUM    // Plan intermedio  
  ENTERPRISE // Plan empresarial
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}

enum PaymentProvider {
  STRIPE
  MERCADO_PAGO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

// Tabla Organizations - Base del multi-tenant (aislamiento por tenant)
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL friendly identifier
  description String?
  country     String?
  phone       String?
  email       String?
  website     String?
  logo        String?  // URL de imagen
  status      OrganizationStatus @default(TRIAL)
  
  // Sistema de suscripciones
  currentPlan       SubscriptionPlan @default(FREE)
  subscriptionId    String?          // ID de la suscripción activa
  billingEmail      String?          // Email para facturación
  
  // Límites del plan actual
  maxUsers          Int              @default(1)    // Usuarios permitidos
  maxMessages       Int              @default(100)  // Mensajes por mes
  maxIntegrations   Int              @default(1)    // Integraciones permitidas
  hasAdvancedFeatures Boolean        @default(false) // Funcionalidades premium
  
  // Control de uso (reseteo mensual)
  currentUsers      Int              @default(0)
  currentMessages   Int              @default(0)
  usageResetDate    DateTime?        // Fecha del próximo reseteo
  
  // Configuración de la organización
  timezone    String   @default("America/Mexico_City")
  currency    String   @default("MXN")
  language    String   @default("es")
  
  // Fechas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  users         User[]
  invitations   Invitation[]
  subscriptions Subscription[]
  payments      Payment[]
  
  @@map("organizations")
}

// Tabla Users con aislamiento por organización
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime?
  name              String?
  fullName          String?
  image             String?
  phone             String?
  country           String?
  
  // Multi-tenant: Aislamiento por organización
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Sistema de roles
  role              UserRole  @default(AGENTE)
  
  // Configuración del usuario
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  timezone          String?
  language          String?   @default("es")
  
  // Fechas
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // NextAuth relations
  accounts          Account[]
  sessions          Session[]
  
  @@index([organizationId])
  @@index([email])
  @@map("users")
}

// Tabla Invitations - Sistema de invitaciones de equipo
model Invitation {
  id             String           @id @default(cuid())
  email          String
  token          String           @unique
  role           UserRole         @default(AGENTE)
  status         InvitationStatus @default(PENDING)
  
  // Multi-tenant: Invitación específica por organización
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Usuario que envió la invitación
  invitedBy      String           // User ID
  invitedByName  String           // Nombre del invitador para el email
  
  // Datos opcionales para pre-llenar el registro
  firstName      String?
  lastName       String?
  message        String?          // Mensaje personalizado
  
  // Control de expiración
  expiresAt      DateTime
  acceptedAt     DateTime?
  
  // Fechas
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  @@index([organizationId])
  @@index([email])
  @@index([token])
  @@map("invitations")
}

// Tabla Subscriptions - Manejo de suscripciones y pagos recurrentes
model Subscription {
  id                  String              @id @default(cuid())
  
  // Relación con la organización
  organizationId      String
  organization        Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Detalles de la suscripción
  plan                SubscriptionPlan
  status              SubscriptionStatus  @default(TRIALING)
  paymentProvider     PaymentProvider
  
  // IDs externos de los proveedores de pago
  stripeSubscriptionId     String?        // ID de Stripe
  stripeCustomerId         String?        // Customer ID de Stripe
  mercadopagoPreapprovalId String?        // ID de preapproval de MercadoPago
  mercadopagoPayerId       String?        // Payer ID de MercadoPago
  
  // Detalles de facturación
  pricePerMonth       Decimal             // Precio mensual en la moneda local
  currency            String              @default("USD")
  billingCycle        String              @default("monthly") // monthly, yearly
  
  // Fechas importantes
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean             @default(false)
  canceledAt          DateTime?
  endedAt             DateTime?
  trialStart          DateTime?
  trialEnd            DateTime?
  
  // Metadata
  metadata            Json?               // Información adicional
  
  // Fechas de control
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relaciones
  payments           Payment[]
  
  @@index([organizationId])
  @@index([stripeSubscriptionId])
  @@index([mercadopagoPreapprovalId])
  @@map("subscriptions")
}

// Tabla Payments - Registro de pagos individuales
model Payment {
  id                     String          @id @default(cuid())
  
  // Relaciones
  organizationId         String
  organization           Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptionId         String?
  subscription           Subscription?   @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  
  // Detalles del pago
  amount                 Decimal         // Monto pagado
  currency               String          @default("USD")
  status                 PaymentStatus   @default(PENDING)
  paymentProvider        PaymentProvider
  
  // IDs externos de los proveedores
  stripePaymentIntentId  String?         // Payment Intent ID de Stripe
  stripeChargeId         String?         // Charge ID de Stripe
  mercadopagoPaymentId   String?         // Payment ID de MercadoPago
  
  // Detalles de facturación
  description            String?         // Descripción del pago
  invoiceUrl             String?         // URL de la factura
  receiptUrl             String?         // URL del recibo
  
  // Fechas
  paidAt                 DateTime?       // Fecha de pago exitoso
  failedAt               DateTime?       // Fecha de pago fallido
  refundedAt             DateTime?       // Fecha de reembolso
  
  // Información adicional
  failureReason          String?         // Razón del fallo
  metadata               Json?           // Información adicional
  
  // Control de fechas
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([stripePaymentIntentId])
  @@index([mercadopagoPaymentId])
  @@map("payments")
}

// Tablas requeridas para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
